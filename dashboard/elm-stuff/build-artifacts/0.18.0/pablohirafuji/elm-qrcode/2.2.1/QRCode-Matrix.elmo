var _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentPatternData = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: 6,
				_1: {
					ctor: '::',
					_0: 18,
					_1: {ctor: '[]'}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: 6,
					_1: {
						ctor: '::',
						_0: 22,
						_1: {ctor: '[]'}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: 6,
						_1: {
							ctor: '::',
							_0: 26,
							_1: {ctor: '[]'}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: 6,
							_1: {
								ctor: '::',
								_0: 30,
								_1: {ctor: '[]'}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: 6,
								_1: {
									ctor: '::',
									_0: 34,
									_1: {ctor: '[]'}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: 6,
									_1: {
										ctor: '::',
										_0: 22,
										_1: {
											ctor: '::',
											_0: 38,
											_1: {ctor: '[]'}
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: 6,
										_1: {
											ctor: '::',
											_0: 24,
											_1: {
												ctor: '::',
												_0: 42,
												_1: {ctor: '[]'}
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '::',
											_0: 6,
											_1: {
												ctor: '::',
												_0: 26,
												_1: {
													ctor: '::',
													_0: 46,
													_1: {ctor: '[]'}
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '::',
												_0: 6,
												_1: {
													ctor: '::',
													_0: 28,
													_1: {
														ctor: '::',
														_0: 50,
														_1: {ctor: '[]'}
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '::',
													_0: 6,
													_1: {
														ctor: '::',
														_0: 30,
														_1: {
															ctor: '::',
															_0: 54,
															_1: {ctor: '[]'}
														}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: 6,
														_1: {
															ctor: '::',
															_0: 32,
															_1: {
																ctor: '::',
																_0: 58,
																_1: {ctor: '[]'}
															}
														}
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '::',
															_0: 6,
															_1: {
																ctor: '::',
																_0: 34,
																_1: {
																	ctor: '::',
																	_0: 62,
																	_1: {ctor: '[]'}
																}
															}
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '::',
																_0: 6,
																_1: {
																	ctor: '::',
																	_0: 26,
																	_1: {
																		ctor: '::',
																		_0: 46,
																		_1: {
																			ctor: '::',
																			_0: 66,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '::',
																	_0: 6,
																	_1: {
																		ctor: '::',
																		_0: 26,
																		_1: {
																			ctor: '::',
																			_0: 48,
																			_1: {
																				ctor: '::',
																				_0: 70,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: 6,
																		_1: {
																			ctor: '::',
																			_0: 26,
																			_1: {
																				ctor: '::',
																				_0: 50,
																				_1: {
																					ctor: '::',
																					_0: 74,
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: 6,
																			_1: {
																				ctor: '::',
																				_0: 30,
																				_1: {
																					ctor: '::',
																					_0: 54,
																					_1: {
																						ctor: '::',
																						_0: 78,
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: 6,
																				_1: {
																					ctor: '::',
																					_0: 30,
																					_1: {
																						ctor: '::',
																						_0: 56,
																						_1: {
																							ctor: '::',
																							_0: 82,
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: 6,
																					_1: {
																						ctor: '::',
																						_0: 30,
																						_1: {
																							ctor: '::',
																							_0: 58,
																							_1: {
																								ctor: '::',
																								_0: 86,
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '::',
																						_0: 6,
																						_1: {
																							ctor: '::',
																							_0: 34,
																							_1: {
																								ctor: '::',
																								_0: 62,
																								_1: {
																									ctor: '::',
																									_0: 90,
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					},
																					_1: {
																						ctor: '::',
																						_0: {
																							ctor: '::',
																							_0: 6,
																							_1: {
																								ctor: '::',
																								_0: 28,
																								_1: {
																									ctor: '::',
																									_0: 50,
																									_1: {
																										ctor: '::',
																										_0: 72,
																										_1: {
																											ctor: '::',
																											_0: 94,
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						},
																						_1: {
																							ctor: '::',
																							_0: {
																								ctor: '::',
																								_0: 6,
																								_1: {
																									ctor: '::',
																									_0: 26,
																									_1: {
																										ctor: '::',
																										_0: 50,
																										_1: {
																											ctor: '::',
																											_0: 74,
																											_1: {
																												ctor: '::',
																												_0: 98,
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							},
																							_1: {
																								ctor: '::',
																								_0: {
																									ctor: '::',
																									_0: 6,
																									_1: {
																										ctor: '::',
																										_0: 30,
																										_1: {
																											ctor: '::',
																											_0: 54,
																											_1: {
																												ctor: '::',
																												_0: 78,
																												_1: {
																													ctor: '::',
																													_0: 102,
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								},
																								_1: {
																									ctor: '::',
																									_0: {
																										ctor: '::',
																										_0: 6,
																										_1: {
																											ctor: '::',
																											_0: 28,
																											_1: {
																												ctor: '::',
																												_0: 54,
																												_1: {
																													ctor: '::',
																													_0: 80,
																													_1: {
																														ctor: '::',
																														_0: 106,
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									},
																									_1: {
																										ctor: '::',
																										_0: {
																											ctor: '::',
																											_0: 6,
																											_1: {
																												ctor: '::',
																												_0: 32,
																												_1: {
																													ctor: '::',
																													_0: 58,
																													_1: {
																														ctor: '::',
																														_0: 84,
																														_1: {
																															ctor: '::',
																															_0: 110,
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										},
																										_1: {
																											ctor: '::',
																											_0: {
																												ctor: '::',
																												_0: 6,
																												_1: {
																													ctor: '::',
																													_0: 30,
																													_1: {
																														ctor: '::',
																														_0: 58,
																														_1: {
																															ctor: '::',
																															_0: 86,
																															_1: {
																																ctor: '::',
																																_0: 114,
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											},
																											_1: {
																												ctor: '::',
																												_0: {
																													ctor: '::',
																													_0: 6,
																													_1: {
																														ctor: '::',
																														_0: 34,
																														_1: {
																															ctor: '::',
																															_0: 62,
																															_1: {
																																ctor: '::',
																																_0: 90,
																																_1: {
																																	ctor: '::',
																																	_0: 118,
																																	_1: {ctor: '[]'}
																																}
																															}
																														}
																													}
																												},
																												_1: {
																													ctor: '::',
																													_0: {
																														ctor: '::',
																														_0: 6,
																														_1: {
																															ctor: '::',
																															_0: 26,
																															_1: {
																																ctor: '::',
																																_0: 50,
																																_1: {
																																	ctor: '::',
																																	_0: 74,
																																	_1: {
																																		ctor: '::',
																																		_0: 98,
																																		_1: {
																																			ctor: '::',
																																			_0: 122,
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													},
																													_1: {
																														ctor: '::',
																														_0: {
																															ctor: '::',
																															_0: 6,
																															_1: {
																																ctor: '::',
																																_0: 30,
																																_1: {
																																	ctor: '::',
																																	_0: 54,
																																	_1: {
																																		ctor: '::',
																																		_0: 78,
																																		_1: {
																																			ctor: '::',
																																			_0: 102,
																																			_1: {
																																				ctor: '::',
																																				_0: 126,
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}
																														},
																														_1: {
																															ctor: '::',
																															_0: {
																																ctor: '::',
																																_0: 6,
																																_1: {
																																	ctor: '::',
																																	_0: 26,
																																	_1: {
																																		ctor: '::',
																																		_0: 52,
																																		_1: {
																																			ctor: '::',
																																			_0: 78,
																																			_1: {
																																				ctor: '::',
																																				_0: 104,
																																				_1: {
																																					ctor: '::',
																																					_0: 130,
																																					_1: {ctor: '[]'}
																																				}
																																			}
																																		}
																																	}
																																}
																															},
																															_1: {
																																ctor: '::',
																																_0: {
																																	ctor: '::',
																																	_0: 6,
																																	_1: {
																																		ctor: '::',
																																		_0: 30,
																																		_1: {
																																			ctor: '::',
																																			_0: 56,
																																			_1: {
																																				ctor: '::',
																																				_0: 82,
																																				_1: {
																																					ctor: '::',
																																					_0: 108,
																																					_1: {
																																						ctor: '::',
																																						_0: 134,
																																						_1: {ctor: '[]'}
																																					}
																																				}
																																			}
																																		}
																																	}
																																},
																																_1: {
																																	ctor: '::',
																																	_0: {
																																		ctor: '::',
																																		_0: 6,
																																		_1: {
																																			ctor: '::',
																																			_0: 34,
																																			_1: {
																																				ctor: '::',
																																				_0: 60,
																																				_1: {
																																					ctor: '::',
																																					_0: 86,
																																					_1: {
																																						ctor: '::',
																																						_0: 112,
																																						_1: {
																																							ctor: '::',
																																							_0: 138,
																																							_1: {ctor: '[]'}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	},
																																	_1: {
																																		ctor: '::',
																																		_0: {
																																			ctor: '::',
																																			_0: 6,
																																			_1: {
																																				ctor: '::',
																																				_0: 30,
																																				_1: {
																																					ctor: '::',
																																					_0: 58,
																																					_1: {
																																						ctor: '::',
																																						_0: 86,
																																						_1: {
																																							ctor: '::',
																																							_0: 114,
																																							_1: {
																																								ctor: '::',
																																								_0: 142,
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		},
																																		_1: {
																																			ctor: '::',
																																			_0: {
																																				ctor: '::',
																																				_0: 6,
																																				_1: {
																																					ctor: '::',
																																					_0: 34,
																																					_1: {
																																						ctor: '::',
																																						_0: 62,
																																						_1: {
																																							ctor: '::',
																																							_0: 90,
																																							_1: {
																																								ctor: '::',
																																								_0: 118,
																																								_1: {
																																									ctor: '::',
																																									_0: 146,
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			},
																																			_1: {
																																				ctor: '::',
																																				_0: {
																																					ctor: '::',
																																					_0: 6,
																																					_1: {
																																						ctor: '::',
																																						_0: 30,
																																						_1: {
																																							ctor: '::',
																																							_0: 54,
																																							_1: {
																																								ctor: '::',
																																								_0: 78,
																																								_1: {
																																									ctor: '::',
																																									_0: 102,
																																									_1: {
																																										ctor: '::',
																																										_0: 126,
																																										_1: {
																																											ctor: '::',
																																											_0: 150,
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				},
																																				_1: {
																																					ctor: '::',
																																					_0: {
																																						ctor: '::',
																																						_0: 6,
																																						_1: {
																																							ctor: '::',
																																							_0: 24,
																																							_1: {
																																								ctor: '::',
																																								_0: 50,
																																								_1: {
																																									ctor: '::',
																																									_0: 76,
																																									_1: {
																																										ctor: '::',
																																										_0: 102,
																																										_1: {
																																											ctor: '::',
																																											_0: 128,
																																											_1: {
																																												ctor: '::',
																																												_0: 154,
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					},
																																					_1: {
																																						ctor: '::',
																																						_0: {
																																							ctor: '::',
																																							_0: 6,
																																							_1: {
																																								ctor: '::',
																																								_0: 28,
																																								_1: {
																																									ctor: '::',
																																									_0: 54,
																																									_1: {
																																										ctor: '::',
																																										_0: 80,
																																										_1: {
																																											ctor: '::',
																																											_0: 106,
																																											_1: {
																																												ctor: '::',
																																												_0: 132,
																																												_1: {
																																													ctor: '::',
																																													_0: 158,
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						},
																																						_1: {
																																							ctor: '::',
																																							_0: {
																																								ctor: '::',
																																								_0: 6,
																																								_1: {
																																									ctor: '::',
																																									_0: 32,
																																									_1: {
																																										ctor: '::',
																																										_0: 58,
																																										_1: {
																																											ctor: '::',
																																											_0: 84,
																																											_1: {
																																												ctor: '::',
																																												_0: 110,
																																												_1: {
																																													ctor: '::',
																																													_0: 136,
																																													_1: {
																																														ctor: '::',
																																														_0: 162,
																																														_1: {ctor: '[]'}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							},
																																							_1: {
																																								ctor: '::',
																																								_0: {
																																									ctor: '::',
																																									_0: 6,
																																									_1: {
																																										ctor: '::',
																																										_0: 26,
																																										_1: {
																																											ctor: '::',
																																											_0: 54,
																																											_1: {
																																												ctor: '::',
																																												_0: 82,
																																												_1: {
																																													ctor: '::',
																																													_0: 110,
																																													_1: {
																																														ctor: '::',
																																														_0: 138,
																																														_1: {
																																															ctor: '::',
																																															_0: 166,
																																															_1: {ctor: '[]'}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								},
																																								_1: {
																																									ctor: '::',
																																									_0: {
																																										ctor: '::',
																																										_0: 6,
																																										_1: {
																																											ctor: '::',
																																											_0: 30,
																																											_1: {
																																												ctor: '::',
																																												_0: 58,
																																												_1: {
																																													ctor: '::',
																																													_0: 86,
																																													_1: {
																																														ctor: '::',
																																														_0: 114,
																																														_1: {
																																															ctor: '::',
																																															_0: 142,
																																															_1: {
																																																ctor: '::',
																																																_0: 170,
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									},
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit = function ($int) {
	var helper = F2(
		function (digit, $int) {
			helper:
			while (true) {
				if (!_elm_lang$core$Native_Utils.eq($int, 0)) {
					var _v0 = digit + 1,
						_v1 = $int >>> 1;
					digit = _v0;
					$int = _v1;
					continue helper;
				} else {
					return digit;
				}
			}
		});
	return A2(helper, 0, $int);
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getAreaCoord = F2(
	function (rows, cols) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (row, list) {
					return A3(
						_elm_lang$core$List$foldl,
						F2(
							function (col, list_) {
								return {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: row, _1: col},
									_1: list_
								};
							}),
						list,
						cols);
				}),
			{ctor: '[]'},
			rows);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getCoord = F2(
	function (size, index) {
		return {
			ctor: '_Tuple2',
			_0: (index / size) | 0,
			_1: A2(_elm_lang$core$Basics_ops['%'], index, size)
		};
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex = F3(
	function (size, row, col) {
		return (size * row) + col;
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$isOccupy = F4(
	function (row, col, size, matrix) {
		var _p0 = A2(
			_elm_lang$core$Array$get,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, row, col),
			matrix);
		if (_p0.ctor === 'Just') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Just') {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$applyMaskColor = F2(
	function (maybeModule, isChange) {
		if (isChange) {
			var _p2 = maybeModule;
			if (((_p2.ctor === 'Just') && (_p2._0.ctor === '_Tuple2')) && (_p2._0._0 === false)) {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: false, _1: !_p2._0._1});
			} else {
				return maybeModule;
			}
		} else {
			return maybeModule;
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$applyMaskFunction = F4(
	function ($function, size, index, maybeModule) {
		return A2(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$applyMaskColor,
			maybeModule,
			$function(
				A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getCoord, size, index)));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$isDarkModule = function (_p3) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$second, _p3));
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule4Score = F2(
	function (size, simplifiedList) {
		var moduleCount = _elm_lang$core$Basics$toFloat(size * size);
		var darkCount = _elm_lang$core$List$length(
			A2(_elm_lang$core$List$filter, _elm_lang$core$Basics$identity, simplifiedList));
		var darkPerc = _elm_lang$core$Basics$round(
			_elm_lang$core$Basics$toFloat(100 * darkCount) / moduleCount);
		var remOf5 = A2(_elm_lang$core$Basics$rem, darkPerc, 5);
		var prevMult5 = _elm_lang$core$Basics$round(
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return x / y;
					}),
				5,
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$abs(
						A3(
							_elm_lang$core$Basics$flip,
							F2(
								function (x, y) {
									return x - y;
								}),
							50,
							darkPerc - remOf5)))));
		var nextMult5 = _elm_lang$core$Basics$round(
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return x / y;
					}),
				5,
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$abs(
						A3(
							_elm_lang$core$Basics$flip,
							F2(
								function (x, y) {
									return x - y;
								}),
							50,
							darkPerc + (5 - remOf5))))));
		return A2(_elm_lang$core$Basics$min, prevMult5, nextMult5) * 10;
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule3Score_ = F2(
	function (simplifiedList, score) {
		rule3Score_:
		while (true) {
			var _p4 = simplifiedList;
			_v5_3:
			do {
				if (_p4.ctor === '[]') {
					return score;
				} else {
					if (_p4._0 === false) {
						if ((((((((((((((((((((_p4._1.ctor === '::') && (_p4._1._0 === false)) && (_p4._1._1.ctor === '::')) && (_p4._1._1._0 === false)) && (_p4._1._1._1.ctor === '::')) && (_p4._1._1._1._0 === false)) && (_p4._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._1._1._0 === true)) {
							var _v6 = _p4._1._1._1._1._1._1._1._1._1._1._1,
								_v7 = score + 40;
							simplifiedList = _v6;
							score = _v7;
							continue rule3Score_;
						} else {
							break _v5_3;
						}
					} else {
						if ((((((((((((((((((((_p4._1.ctor === '::') && (_p4._1._0 === false)) && (_p4._1._1.ctor === '::')) && (_p4._1._1._0 === true)) && (_p4._1._1._1.ctor === '::')) && (_p4._1._1._1._0 === true)) && (_p4._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._0 === true)) && (_p4._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._1._0 === false)) && (_p4._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p4._1._1._1._1._1._1._1._1._1._1._0 === false)) {
							var _v8 = _p4._1._1._1._1._1._1._1._1._1._1._1,
								_v9 = score + 40;
							simplifiedList = _v8;
							score = _v9;
							continue rule3Score_;
						} else {
							break _v5_3;
						}
					}
				}
			} while(false);
			var _v10 = _p4._1,
				_v11 = score;
			simplifiedList = _v10;
			score = _v11;
			continue rule3Score_;
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule3Score = A2(_elm_lang$core$List$foldl, _pablohirafuji$elm_qrcode$QRCode_Matrix$rule3Score_, 0);
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule2Score_ = F4(
	function (row1, row2, maybeLast, score) {
		rule2Score_:
		while (true) {
			var _p5 = row1;
			if (_p5.ctor === '[]') {
				return score;
			} else {
				var _p9 = _p5._1;
				var _p8 = _p5._0;
				var _p6 = row2;
				if (_p6.ctor === '[]') {
					return score;
				} else {
					var _p7 = _p6._1;
					if (_elm_lang$core$Native_Utils.eq(_p8, _p6._0)) {
						if (_elm_lang$core$Native_Utils.eq(
							_elm_lang$core$Maybe$Just(_p8),
							maybeLast)) {
							var _v14 = _p9,
								_v15 = _p7,
								_v16 = _elm_lang$core$Maybe$Just(_p8),
								_v17 = score + 3;
							row1 = _v14;
							row2 = _v15;
							maybeLast = _v16;
							score = _v17;
							continue rule2Score_;
						} else {
							var _v18 = _p9,
								_v19 = _p7,
								_v20 = _elm_lang$core$Maybe$Just(_p8),
								_v21 = score;
							row1 = _v18;
							row2 = _v19;
							maybeLast = _v20;
							score = _v21;
							continue rule2Score_;
						}
					} else {
						var _v22 = _p9,
							_v23 = _p7,
							_v24 = _elm_lang$core$Maybe$Nothing,
							_v25 = score;
						row1 = _v22;
						row2 = _v23;
						maybeLast = _v24;
						score = _v25;
						continue rule2Score_;
					}
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule2Score = F2(
	function (list, score) {
		rule2Score:
		while (true) {
			var _p10 = list;
			if ((_p10.ctor === '::') && (_p10._1.ctor === '::')) {
				var _v27 = _p10._1._1,
					_v28 = A2(
					F2(
						function (x, y) {
							return x + y;
						}),
					score,
					A4(_pablohirafuji$elm_qrcode$QRCode_Matrix$rule2Score_, _p10._0, _p10._1._0, _elm_lang$core$Maybe$Nothing, 0));
				list = _v27;
				score = _v28;
				continue rule2Score;
			} else {
				return score;
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule1Score_ = F2(
	function (simplifiedList, _p11) {
		rule1Score_:
		while (true) {
			var _p12 = _p11;
			var _p18 = _p12._2;
			var _p17 = _p12._1;
			var _p16 = _p12._0;
			var _p13 = simplifiedList;
			if (_p13.ctor === '[]') {
				return (_elm_lang$core$Native_Utils.cmp(_p17, 5) > -1) ? ((_p18 + _p17) - 2) : _p18;
			} else {
				var _p15 = _p13._1;
				var _p14 = _p13._0;
				if (_elm_lang$core$Native_Utils.eq(_p16, _p14)) {
					var _v31 = _p15,
						_v32 = {ctor: '_Tuple3', _0: _p16, _1: _p17 + 1, _2: _p18};
					simplifiedList = _v31;
					_p11 = _v32;
					continue rule1Score_;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(_p17, 5) > -1) {
						var _v33 = _p15,
							_v34 = {ctor: '_Tuple3', _0: _p14, _1: 0, _2: (_p18 + _p17) - 2};
						simplifiedList = _v33;
						_p11 = _v34;
						continue rule1Score_;
					} else {
						var _v35 = _p15,
							_v36 = {ctor: '_Tuple3', _0: _p14, _1: 0, _2: _p18};
						simplifiedList = _v35;
						_p11 = _v36;
						continue rule1Score_;
					}
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$rule1Score = function (_p19) {
	return _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			A2(
				_elm_lang$core$Basics$flip,
				_pablohirafuji$elm_qrcode$QRCode_Matrix$rule1Score_,
				{ctor: '_Tuple3', _0: false, _1: 0, _2: 0}),
			_p19));
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$breakList = F3(
	function (width, list, acc) {
		breakList:
		while (true) {
			var _p20 = list;
			if (_p20.ctor === '[]') {
				return _elm_lang$core$List$reverse(acc);
			} else {
				var _v38 = width,
					_v39 = A2(_elm_lang$core$List$drop, width, list),
					_v40 = {
					ctor: '::',
					_0: A2(_elm_lang$core$List$take, width, list),
					_1: acc
				};
				width = _v38;
				list = _v39;
				acc = _v40;
				continue breakList;
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getMaskScore = F2(
	function (size, matrix) {
		var list = A2(
			_elm_lang$core$List$map,
			_pablohirafuji$elm_qrcode$QRCode_Matrix$isDarkModule,
			_elm_lang$core$Array$toList(matrix));
		var rowList = A3(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$breakList,
			size,
			list,
			{ctor: '[]'});
		var transposedRowList = _pablohirafuji$elm_qrcode$QRCode_Helpers$transpose(rowList);
		return A2(
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			rowList,
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$rule4Score, size, list),
				A2(
					F2(
						function (x, y) {
							return x + y;
						}),
					_pablohirafuji$elm_qrcode$QRCode_Matrix$rule3Score(transposedRowList),
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						_pablohirafuji$elm_qrcode$QRCode_Matrix$rule3Score(rowList),
						A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$rule2Score, rowList, 0),
							A2(
								F2(
									function (x, y) {
										return x + y;
									}),
								_pablohirafuji$elm_qrcode$QRCode_Matrix$rule1Score(transposedRowList),
								_pablohirafuji$elm_qrcode$QRCode_Matrix$rule1Score(rowList)))))));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$maskFunction = function (mask) {
	var _p21 = mask;
	switch (_p21.ctor) {
		case 'Pattern0':
			return function (_p22) {
				var _p23 = _p22;
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], _p23._0 + _p23._1, 2),
					0);
			};
		case 'Pattern1':
			return function (_p24) {
				var _p25 = _p24;
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], _p25._0, 2),
					0);
			};
		case 'Pattern2':
			return function (_p26) {
				var _p27 = _p26;
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], _p27._1, 3),
					0);
			};
		case 'Pattern3':
			return function (_p28) {
				var _p29 = _p28;
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], _p29._0 + _p29._1, 3),
					0);
			};
		case 'Pattern4':
			return function (_p30) {
				var _p31 = _p30;
				return _elm_lang$core$Native_Utils.eq(
					A2(
						_elm_lang$core$Basics_ops['%'],
						_elm_lang$core$Basics$floor(
							_elm_lang$core$Basics$toFloat(_p31._0) / 2) + _elm_lang$core$Basics$floor(
							_elm_lang$core$Basics$toFloat(_p31._1) / 3),
						2),
					0);
			};
		case 'Pattern5':
			return function (_p32) {
				var _p33 = _p32;
				var _p35 = _p33._0;
				var _p34 = _p33._1;
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], _p35 * _p34, 2) + A2(_elm_lang$core$Basics_ops['%'], _p35 * _p34, 3),
					0);
			};
		case 'Pattern6':
			return function (_p36) {
				var _p37 = _p36;
				var _p39 = _p37._0;
				var _p38 = _p37._1;
				return _elm_lang$core$Native_Utils.eq(
					A2(
						_elm_lang$core$Basics_ops['%'],
						A2(_elm_lang$core$Basics_ops['%'], _p39 * _p38, 2) + A2(_elm_lang$core$Basics_ops['%'], _p39 * _p38, 3),
						2),
					0);
			};
		default:
			return function (_p40) {
				var _p41 = _p40;
				var _p43 = _p41._0;
				var _p42 = _p41._1;
				return _elm_lang$core$Native_Utils.eq(
					A2(
						_elm_lang$core$Basics_ops['%'],
						A2(_elm_lang$core$Basics_ops['%'], _p43 * _p42, 3) + A2(_elm_lang$core$Basics_ops['%'], _p43 + _p42, 2),
						2),
					0);
			};
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$applyMask = F3(
	function (size, mask, matrix) {
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Array$indexedMap,
			matrix,
			A2(
				_pablohirafuji$elm_qrcode$QRCode_Matrix$applyMaskFunction,
				_pablohirafuji$elm_qrcode$QRCode_Matrix$maskFunction(mask),
				size));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$maskToInt = function (mask) {
	var _p44 = mask;
	switch (_p44.ctor) {
		case 'Pattern0':
			return 0;
		case 'Pattern1':
			return 1;
		case 'Pattern2':
			return 2;
		case 'Pattern3':
			return 3;
		case 'Pattern4':
			return 4;
		case 'Pattern5':
			return 5;
		case 'Pattern6':
			return 6;
		default:
			return 7;
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$bitToColor = F2(
	function ($byte, offset) {
		return A2(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				}),
			1,
			1 & ($byte >> (7 - offset)));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setDataModule = F3(
	function (_p45, $byte, offset) {
		var _p46 = _p45;
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, _p46.size, _p46.row, _p46.col),
			_elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: false,
					_1: A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$bitToColor, $byte, offset)
				}));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$nextModule = function (_p47) {
	var _p48 = _p47;
	var _p51 = _p48.row;
	var _p50 = _p48;
	var _p49 = _p48.col;
	return _p48.isRight ? _elm_lang$core$Native_Utils.update(
		_p50,
		{col: _p49 - 1, isRight: false}) : (_p48.isUp ? _elm_lang$core$Native_Utils.update(
		_p50,
		{row: _p51 - 1, col: _p49 + 1, isRight: true}) : _elm_lang$core$Native_Utils.update(
		_p50,
		{row: _p51 + 1, col: _p49 + 1, isRight: true}));
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$addDataModule = F4(
	function (_p52, bytes, offset, matrix) {
		addDataModule:
		while (true) {
			var _p53 = _p52;
			var _p58 = _p53.size;
			var _p57 = _p53.row;
			var _p56 = _p53;
			var _p55 = _p53.col;
			var _p54 = bytes;
			if (_p54.ctor === '[]') {
				return matrix;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(offset, 8) > -1) {
					var _v55 = _p56,
						_v56 = _p54._1,
						_v57 = 0,
						_v58 = matrix;
					_p52 = _v55;
					bytes = _v56;
					offset = _v57;
					matrix = _v58;
					continue addDataModule;
				} else {
					if (_elm_lang$core$Native_Utils.eq(_p55, 6)) {
						var _v59 = _elm_lang$core$Native_Utils.update(
							_p56,
							{col: _p55 - 1, isRight: true}),
							_v60 = bytes,
							_v61 = offset,
							_v62 = matrix;
						_p52 = _v59;
						bytes = _v60;
						offset = _v61;
						matrix = _v62;
						continue addDataModule;
					} else {
						if (_elm_lang$core$Native_Utils.cmp(_p57, 0) < 0) {
							var _v63 = _elm_lang$core$Native_Utils.update(
								_p56,
								{row: 0, col: _p55 - 2, isRight: true, isUp: false}),
								_v64 = bytes,
								_v65 = offset,
								_v66 = matrix;
							_p52 = _v63;
							bytes = _v64;
							offset = _v65;
							matrix = _v66;
							continue addDataModule;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p57, _p58) > -1) {
								var _v67 = _elm_lang$core$Native_Utils.update(
									_p56,
									{row: _p58 - 1, col: _p55 - 2, isRight: true, isUp: true}),
									_v68 = bytes,
									_v69 = offset,
									_v70 = matrix;
								_p52 = _v67;
								bytes = _v68;
								offset = _v69;
								matrix = _v70;
								continue addDataModule;
							} else {
								if (A4(_pablohirafuji$elm_qrcode$QRCode_Matrix$isOccupy, _p57, _p55, _p58, matrix)) {
									var _v71 = _pablohirafuji$elm_qrcode$QRCode_Matrix$nextModule(_p56),
										_v72 = bytes,
										_v73 = offset,
										_v74 = matrix;
									_p52 = _v71;
									bytes = _v72;
									offset = _v73;
									matrix = _v74;
									continue addDataModule;
								} else {
									var _v75 = _pablohirafuji$elm_qrcode$QRCode_Matrix$nextModule(_p56),
										_v76 = bytes,
										_v77 = offset + 1,
										_v78 = A4(_pablohirafuji$elm_qrcode$QRCode_Matrix$setDataModule, _p56, _p54._0, offset, matrix);
									_p52 = _v75;
									bytes = _v76;
									offset = _v77;
									matrix = _v78;
									continue addDataModule;
								}
							}
						}
					}
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$initPlacement = function (size) {
	return {size: size, row: size + 1, col: size + 1, isRight: true, isUp: true};
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$addData = F3(
	function (size, bytes, matrix) {
		return A4(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$addDataModule,
			_pablohirafuji$elm_qrcode$QRCode_Matrix$initPlacement(size),
			bytes,
			0,
			matrix);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentColor = F2(
	function (row, col) {
		return (_elm_lang$core$Native_Utils.eq(row, -2) || (_elm_lang$core$Native_Utils.eq(row, 2) || (_elm_lang$core$Native_Utils.eq(col, -2) || (_elm_lang$core$Native_Utils.eq(col, 2) || (_elm_lang$core$Native_Utils.eq(row, 0) && _elm_lang$core$Native_Utils.eq(col, 0)))))) ? _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: true, _1: true}) : _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: true, _1: false});
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignModule = F4(
	function (size, rowPos, colPos, _p59) {
		var _p60 = _p59;
		var _p62 = _p60._0;
		var _p61 = _p60._1;
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, _p62 + rowPos, _p61 + colPos),
			A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentColor, _p62, _p61));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentRange = A2(_elm_lang$core$List$range, -2, 2);
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignment = F3(
	function (size, _p63, matrix) {
		var _p64 = _p63;
		return A3(
			_elm_lang$core$List$foldl,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignModule, size, _p64._0, _p64._1),
			matrix,
			A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getAreaCoord, _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentRange, _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentRange));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$isValidAlign = F2(
	function (size, _p65) {
		var _p66 = _p65;
		var _p68 = _p66._0;
		var _p67 = _p66._1;
		return ((_elm_lang$core$Native_Utils.cmp(_p68, 10) > 0) || ((_elm_lang$core$Native_Utils.cmp(10, _p67) < 0) && (_elm_lang$core$Native_Utils.cmp(_p67, size - 10) < 0))) && ((_elm_lang$core$Native_Utils.cmp(_p68, size - 10) < 0) || (_elm_lang$core$Native_Utils.cmp(_p67, 10) > 0));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignments = F3(
	function (size, locations, matrix) {
		return A3(
			_elm_lang$core$List$foldl,
			_pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignment(size),
			matrix,
			A2(
				_elm_lang$core$List$filter,
				_pablohirafuji$elm_qrcode$QRCode_Matrix$isValidAlign(size),
				A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getAreaCoord, locations, locations)));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentPattern = F3(
	function (version, size, matrix) {
		return A2(
			_elm_lang$core$Result$map,
			A2(
				_elm_lang$core$Basics$flip,
				_pablohirafuji$elm_qrcode$QRCode_Matrix$setAlignments(size),
				matrix),
			A2(
				_elm_lang$core$Result$fromMaybe,
				_pablohirafuji$elm_qrcode$QRCode_Error$AlignmentPatternNotFound,
				A2(_elm_lang$core$Array$get, version - 1, _pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentPatternData)));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$timingColor = F2(
	function (row, col) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], row + col, 2),
			0) ? _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: true, _1: true}) : _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: true, _1: false});
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setTiming = F3(
	function (size, row, col) {
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, row, col),
			A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$timingColor, row, col));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$timingPattern = F2(
	function (size, matrix) {
		var range = A2(_elm_lang$core$List$range, 8, size - 9);
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$foldl(
				A2(
					_elm_lang$core$Basics$flip,
					_pablohirafuji$elm_qrcode$QRCode_Matrix$setTiming(size),
					6)),
			range,
			A3(
				_elm_lang$core$List$foldl,
				A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$setTiming, size, 6),
				matrix,
				range));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$darkModule = F2(
	function (version, size) {
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, (4 * version) + 9, 8),
			_elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: true, _1: true}));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$encodeVersionInfo = function (version) {
	var g18Int = 7973;
	var g18Digit = _pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(g18Int);
	var helper = function (d_) {
		helper:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(
				_pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(d_) - g18Digit,
				0) > -1) {
				var _v82 = d_ ^ A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Bitwise$shiftLeftBy,
					g18Int,
					_pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(d_) - g18Digit);
				d_ = _v82;
				continue helper;
			} else {
				return d_ | (version << 12);
			}
		}
	};
	var d = version << 12;
	return helper(d);
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionModule = F3(
	function (size, isBlack, _p69) {
		var _p70 = _p69;
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, _p70._0, _p70._1),
			_elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: true, _1: isBlack}));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionInfo_ = F4(
	function (size, isBlackFn, count, matrix) {
		setVersionInfo_:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(count, 18) < 0) {
				var isBlack = isBlackFn(count);
				var bottomLeft = {
					ctor: '_Tuple2',
					_0: ((A2(_elm_lang$core$Basics_ops['%'], count, 3) + size) - 8) - 3,
					_1: _elm_lang$core$Basics$floor(
						_elm_lang$core$Basics$toFloat(count) / 3)
				};
				var topRight = {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$floor(
						_elm_lang$core$Basics$toFloat(count) / 3),
					_1: ((A2(_elm_lang$core$Basics_ops['%'], count, 3) + size) - 8) - 3
				};
				var _v84 = size,
					_v85 = isBlackFn,
					_v86 = count + 1,
					_v87 = A4(
					_pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionModule,
					size,
					isBlack,
					bottomLeft,
					A4(_pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionModule, size, isBlack, topRight, matrix));
				size = _v84;
				isBlackFn = _v85;
				count = _v86;
				matrix = _v87;
				continue setVersionInfo_;
			} else {
				return matrix;
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionInfo = F3(
	function (version, size, matrix) {
		if (_elm_lang$core$Native_Utils.cmp(version, 7) > -1) {
			var isBlack = F2(
				function (bits_, count) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						1,
						1 & (bits_ >> count));
				});
			var bits = _pablohirafuji$elm_qrcode$QRCode_Matrix$encodeVersionInfo(version);
			return A4(
				_pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionInfo_,
				size,
				isBlack(bits),
				0,
				matrix);
		} else {
			return matrix;
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$ecLevelToInt = function (ecLevel) {
	var _p71 = ecLevel;
	switch (_p71.ctor) {
		case 'L':
			return 1;
		case 'M':
			return 0;
		case 'Q':
			return 3;
		default:
			return 2;
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$encodeFormatInfo = F2(
	function (ecLevel, mask) {
		var g15Mask = 21522;
		var g15Int = 1335;
		var g15Digit = _pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(g15Int);
		var formatInfoInt = _pablohirafuji$elm_qrcode$QRCode_Matrix$maskToInt(mask) | (_pablohirafuji$elm_qrcode$QRCode_Matrix$ecLevelToInt(ecLevel) << 3);
		var d = formatInfoInt << 10;
		var helper = function (d_) {
			helper:
			while (true) {
				if (_elm_lang$core$Native_Utils.cmp(
					_pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(d_) - g15Digit,
					0) > -1) {
					var _v89 = d_ ^ A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Bitwise$shiftLeftBy,
						g15Int,
						_pablohirafuji$elm_qrcode$QRCode_Matrix$getBCHDigit(d_) - g15Digit);
					d_ = _v89;
					continue helper;
				} else {
					return g15Mask ^ (d_ | (formatInfoInt << 10));
				}
			}
		};
		return helper(d);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatModule = F4(
	function (size, isBlack, row, col) {
		return A2(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, row, col),
			_elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: true, _1: isBlack}));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$formatInfoVertical = F2(
	function (size, count) {
		return (_elm_lang$core$Native_Utils.cmp(count, 6) < 0) ? {ctor: '_Tuple2', _0: count, _1: 8} : ((_elm_lang$core$Native_Utils.cmp(count, 8) < 0) ? {ctor: '_Tuple2', _0: count + 1, _1: 8} : {ctor: '_Tuple2', _0: (size - 15) + count, _1: 8});
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$formatInfoHorizontal = F2(
	function (size, count) {
		return (_elm_lang$core$Native_Utils.cmp(count, 8) < 0) ? {ctor: '_Tuple2', _0: 8, _1: (size - count) - 1} : ((_elm_lang$core$Native_Utils.cmp(count, 9) < 0) ? {ctor: '_Tuple2', _0: 8, _1: 15 - count} : {ctor: '_Tuple2', _0: 8, _1: (15 - count) - 1});
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatInfo_ = F4(
	function (size, isBlackFn, count, matrix) {
		setFormatInfo_:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(count, 15) < 0) {
				var isBlack = isBlackFn(count);
				var _p72 = A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$formatInfoVertical, size, count);
				var x2 = _p72._0;
				var y2 = _p72._1;
				var _p73 = A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$formatInfoHorizontal, size, count);
				var x1 = _p73._0;
				var y1 = _p73._1;
				var _v90 = size,
					_v91 = isBlackFn,
					_v92 = count + 1,
					_v93 = A5(
					_pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatModule,
					size,
					isBlack,
					x2,
					y2,
					A5(_pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatModule, size, isBlack, x1, y1, matrix));
				size = _v90;
				isBlackFn = _v91;
				count = _v92;
				matrix = _v93;
				continue setFormatInfo_;
			} else {
				return matrix;
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatInfo = F4(
	function (ecLevel, size, mask, matrix) {
		var isBlack = F2(
			function (bits_, count) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					1,
					1 & (bits_ >> count));
			});
		var bits = A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$encodeFormatInfo, ecLevel, mask);
		return A4(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatInfo_,
			size,
			isBlack(bits),
			0,
			matrix);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getBestMask_ = F5(
	function (ecLevel, size, matrix, mask, _p74) {
		var _p75 = _p74;
		var _p77 = _p75._1;
		var maskedMatrix = A4(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatInfo,
			ecLevel,
			size,
			mask,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$applyMask, size, mask, matrix));
		var _p76 = A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getMaskScore, size, maskedMatrix);
		var maskSMatrix = _p76._0;
		var maskScore = _p76._1;
		return ((_elm_lang$core$Native_Utils.cmp(_p77, maskScore) < 0) && (!_elm_lang$core$Native_Utils.eq(_p77, -1))) ? {ctor: '_Tuple2', _0: _p75._0, _1: _p77} : {ctor: '_Tuple2', _0: maskSMatrix, _1: maskScore};
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$reserveFormatInfo = F2(
	function (size, matrix) {
		return A4(
			_pablohirafuji$elm_qrcode$QRCode_Matrix$setFormatInfo_,
			size,
			_elm_lang$core$Basics$always(true),
			0,
			matrix);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$finderColor = F2(
	function (row, col) {
		return ((_elm_lang$core$Native_Utils.cmp(1, row) < 1) && ((_elm_lang$core$Native_Utils.cmp(row, 7) < 1) && (_elm_lang$core$Native_Utils.eq(col, 1) || _elm_lang$core$Native_Utils.eq(col, 7)))) || (((_elm_lang$core$Native_Utils.cmp(1, col) < 1) && ((_elm_lang$core$Native_Utils.cmp(col, 7) < 1) && (_elm_lang$core$Native_Utils.eq(row, 1) || _elm_lang$core$Native_Utils.eq(row, 7)))) || ((_elm_lang$core$Native_Utils.cmp(3, row) < 1) && ((_elm_lang$core$Native_Utils.cmp(row, 5) < 1) && ((_elm_lang$core$Native_Utils.cmp(3, col) < 1) && (_elm_lang$core$Native_Utils.cmp(col, 5) < 1)))));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$setFinder = F5(
	function (size, rowOffset, colOffset, _p78, matrix) {
		var _p79 = _p78;
		var _p81 = _p79._0;
		var _p80 = _p79._1;
		var finalCol = _p80 + colOffset;
		var finalRow = _p81 + rowOffset;
		return ((_elm_lang$core$Native_Utils.cmp(finalRow, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(finalCol, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(finalRow, size) > -1) || (_elm_lang$core$Native_Utils.cmp(finalCol, size) > -1)))) ? matrix : A3(
			_elm_lang$core$Array$set,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getIndex, size, finalRow, finalCol),
			_elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: true,
					_1: A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$finderColor, _p81, _p80)
				}),
			matrix);
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$finderRange = A2(_elm_lang$core$List$range, 0, 8);
var _pablohirafuji$elm_qrcode$QRCode_Matrix$finderPattern = F4(
	function (size, rowOffset, colOffset, matrix) {
		return A3(
			_elm_lang$core$List$foldl,
			A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$setFinder, size, rowOffset, colOffset),
			matrix,
			A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getAreaCoord, _pablohirafuji$elm_qrcode$QRCode_Matrix$finderRange, _pablohirafuji$elm_qrcode$QRCode_Matrix$finderRange));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Placement = F5(
	function (a, b, c, d, e) {
		return {size: a, row: b, col: c, isRight: d, isUp: e};
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern7 = {ctor: 'Pattern7'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern6 = {ctor: 'Pattern6'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern5 = {ctor: 'Pattern5'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern4 = {ctor: 'Pattern4'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern3 = {ctor: 'Pattern3'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern2 = {ctor: 'Pattern2'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern1 = {ctor: 'Pattern1'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern0 = {ctor: 'Pattern0'};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$patternList = {
	ctor: '::',
	_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern0,
	_1: {
		ctor: '::',
		_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern1,
		_1: {
			ctor: '::',
			_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern2,
			_1: {
				ctor: '::',
				_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern3,
				_1: {
					ctor: '::',
					_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern4,
					_1: {
						ctor: '::',
						_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern5,
						_1: {
							ctor: '::',
							_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern6,
							_1: {
								ctor: '::',
								_0: _pablohirafuji$elm_qrcode$QRCode_Matrix$Pattern7,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Matrix$getBestMask = F3(
	function (ecLevel, size, matrix) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldl,
				A3(_pablohirafuji$elm_qrcode$QRCode_Matrix$getBestMask_, ecLevel, size, matrix),
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: -1
				},
				_pablohirafuji$elm_qrcode$QRCode_Matrix$patternList));
	});
var _pablohirafuji$elm_qrcode$QRCode_Matrix$apply = function (_p82) {
	var _p83 = _p82;
	var version = _p83._0.groupInfo.version;
	var size = ((version - 1) * 4) + 21;
	return A2(
		_elm_lang$core$Result$map,
		A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$getBestMask, _p83._0.ecLevel, size),
		A2(
			_elm_lang$core$Result$map,
			A2(_pablohirafuji$elm_qrcode$QRCode_Matrix$addData, size, _p83._1),
			A3(
				_pablohirafuji$elm_qrcode$QRCode_Matrix$alignmentPattern,
				version,
				size,
				A2(
					_pablohirafuji$elm_qrcode$QRCode_Matrix$timingPattern,
					size,
					A3(
						_pablohirafuji$elm_qrcode$QRCode_Matrix$darkModule,
						version,
						size,
						A3(
							_pablohirafuji$elm_qrcode$QRCode_Matrix$setVersionInfo,
							version,
							size,
							A2(
								_pablohirafuji$elm_qrcode$QRCode_Matrix$reserveFormatInfo,
								size,
								A4(
									_pablohirafuji$elm_qrcode$QRCode_Matrix$finderPattern,
									size,
									-1,
									size - 8,
									A4(
										_pablohirafuji$elm_qrcode$QRCode_Matrix$finderPattern,
										size,
										size - 8,
										-1,
										A4(
											_pablohirafuji$elm_qrcode$QRCode_Matrix$finderPattern,
											size,
											-1,
											-1,
											A2(
												_elm_lang$core$Array$initialize,
												size * size,
												_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing))))))))))));
};
