var _pablohirafuji$elm_qrcode$QRCode_Encode$concatTranspose = function (_p0) {
	var _p1 = _p0;
	return A2(
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		_p1._0,
		_elm_lang$core$List$concat(
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				_pablohirafuji$elm_qrcode$QRCode_Helpers$transpose(_p1._1),
				_pablohirafuji$elm_qrcode$QRCode_Helpers$transpose(_p1._2))));
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$getErrorCorrection = function (_p2) {
	var _p3 = _p2;
	var _p5 = _p3._0;
	var _p4 = _p3._1;
	return A2(
		_elm_lang$core$Result$map,
		A2(
			F3(
				function (v0, v1, v2) {
					return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
				}),
			_p5,
			_p4),
		A2(_pablohirafuji$elm_qrcode$QRCode_ErrorCorrection$get, _p5.groupInfo.ecPerBlock, _p4));
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$breakList = F3(
	function (checkFinish, _p7, _p6) {
		breakList:
		while (true) {
			var _p8 = _p7;
			var _p13 = _p8._0;
			var _p12 = _p8._1;
			var _p9 = _p6;
			var _p11 = _p9._1;
			var _p10 = _p9._0;
			if (_elm_lang$core$Native_Utils.cmp(_p13, 0) > 0) {
				var remainList = A2(_elm_lang$core$List$drop, _p12, _p10);
				var block = A2(_elm_lang$core$List$take, _p12, _p10);
				var _v4 = checkFinish,
					_v5 = {ctor: '_Tuple2', _0: _p13 - 1, _1: _p12},
					_v6 = {
					ctor: '_Tuple2',
					_0: remainList,
					_1: {ctor: '::', _0: block, _1: _p11}
				};
				checkFinish = _v4;
				_p7 = _v5;
				_p6 = _v6;
				continue breakList;
			} else {
				if (checkFinish && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p10),
					0) > 0)) {
					return _elm_lang$core$Result$Err(_pablohirafuji$elm_qrcode$QRCode_Error$InputLengthOverflow);
				} else {
					return _elm_lang$core$Result$Ok(
						{ctor: '_Tuple2', _0: _p10, _1: _p11});
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$toBlocks = function (_p14) {
	var _p15 = _p14;
	var _p21 = _p15._0;
	var _p20 = _p15._0.groupInfo;
	var _p19 = _p15._1;
	var _p16 = _p20.maybeGroup2;
	if (_p16.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$map,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				})(_p21),
			A2(
				_elm_lang$core$Result$map,
				function (_p17) {
					return _elm_lang$core$List$reverse(
						_elm_lang$core$Tuple$second(_p17));
				},
				A2(
					_elm_lang$core$Result$andThen,
					A2(_pablohirafuji$elm_qrcode$QRCode_Encode$breakList, true, _p16._0),
					A3(
						_pablohirafuji$elm_qrcode$QRCode_Encode$breakList,
						false,
						_p20.group1,
						{
							ctor: '_Tuple2',
							_0: _p19,
							_1: {ctor: '[]'}
						}))));
	} else {
		return A2(
			_elm_lang$core$Result$map,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				})(_p21),
			A2(
				_elm_lang$core$Result$map,
				function (_p18) {
					return _elm_lang$core$List$reverse(
						_elm_lang$core$Tuple$second(_p18));
				},
				A3(
					_pablohirafuji$elm_qrcode$QRCode_Encode$breakList,
					true,
					_p20.group1,
					{
						ctor: '_Tuple2',
						_0: _p19,
						_1: {ctor: '[]'}
					})));
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$secondFillerByte = 17;
var _pablohirafuji$elm_qrcode$QRCode_Encode$firstFillerByte = 236;
var _pablohirafuji$elm_qrcode$QRCode_Encode$addFiller = F2(
	function (capacity, bytes) {
		var fillerLength = ((capacity / 8) | 0) - _elm_lang$core$List$length(bytes);
		return A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			bytes,
			(_elm_lang$core$Native_Utils.eq(
				A2(_elm_lang$core$Basics_ops['%'], fillerLength, 2),
				0) ? _elm_lang$core$Basics$identity : A2(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: _pablohirafuji$elm_qrcode$QRCode_Encode$firstFillerByte,
					_1: {ctor: '[]'}
				}))(
				_elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$repeat,
						(fillerLength / 2) | 0,
						{
							ctor: '::',
							_0: _pablohirafuji$elm_qrcode$QRCode_Encode$firstFillerByte,
							_1: {
								ctor: '::',
								_0: _pablohirafuji$elm_qrcode$QRCode_Encode$secondFillerByte,
								_1: {ctor: '[]'}
							}
						}))));
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes3 = function (_p22) {
	bitsToBytes3:
	while (true) {
		var _p23 = _p22;
		var _p26 = _p23._0._1;
		var _p25 = _p23._1;
		var _p24 = _p23._0._0;
		if (_elm_lang$core$Native_Utils.cmp(_p26, 8) > -1) {
			var remLength = _p26 - 8;
			var remBits = _p24 & A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return x - y;
					}),
				1,
				1 << remLength);
			var $byte = _p24 >> remLength;
			var _v10 = {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: remBits, _1: remLength},
				_1: {ctor: '::', _0: $byte, _1: _p25}
			};
			_p22 = _v10;
			continue bitsToBytes3;
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: _p24, _1: _p26},
				_1: _p25
			};
		}
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes2 = F2(
	function (_p28, _p27) {
		var _p29 = _p28;
		var _p31 = _p29._1;
		var _p30 = _p27;
		var bitsSum = _p29._0 | (_p30._0._0 << _p31);
		var lengthSum = _p31 + _p30._0._1;
		return _pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes3(
			{
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: bitsSum, _1: lengthSum},
				_1: _p30._1
			});
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes1 = F2(
	function (bits, _p32) {
		bitsToBytes1:
		while (true) {
			var _p33 = _p32;
			var _p37 = _p33._0._1;
			var _p36 = _p33._0._0;
			var _p35 = _p33._1;
			var _p34 = bits;
			if (_p34.ctor === '::') {
				var _v15 = _p34._1,
					_v16 = A2(
					_pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes2,
					_p34._0,
					{
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: _p36, _1: _p37},
						_1: _p35
					});
				bits = _v15;
				_p32 = _v16;
				continue bitsToBytes1;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p37, 0) ? _elm_lang$core$List$reverse(_p35) : _elm_lang$core$List$reverse(
					A3(
						_elm_lang$core$Basics$flip,
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							}),
						_p35,
						_p36 << (8 - _p37)));
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes = function (bits) {
	return A2(
		_pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes1,
		bits,
		{
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: 0, _1: 0},
			_1: {ctor: '[]'}
		});
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$addTerminator = F3(
	function (capacity, bitsCount, bits) {
		return A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			bits,
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				{ctor: '[]'},
				A2(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					0,
					A2(_elm_lang$core$Basics$min, 4, capacity - bitsCount))));
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicatorLength = F2(
	function (mode, version) {
		if (_elm_lang$core$Native_Utils.cmp(version, 9) < 1) {
			var _p38 = mode;
			switch (_p38.ctor) {
				case 'Numeric':
					return 10;
				case 'Alphanumeric':
					return 9;
				case 'Byte':
					return 8;
				default:
					return 8;
			}
		} else {
			if (_elm_lang$core$Native_Utils.cmp(version, 26) < 1) {
				var _p39 = mode;
				switch (_p39.ctor) {
					case 'Numeric':
						return 12;
					case 'Alphanumeric':
						return 11;
					case 'Byte':
						return 16;
					default:
						return 16;
				}
			} else {
				var _p40 = mode;
				switch (_p40.ctor) {
					case 'Numeric':
						return 14;
					case 'Alphanumeric':
						return 13;
					case 'Byte':
						return 16;
					default:
						return 16;
				}
			}
		}
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$filterCapacity = F3(
	function (mode, dataLength, _p41) {
		var _p42 = _p41;
		return function (length) {
			return _elm_lang$core$Native_Utils.cmp(length, _p42.capacity) < 1;
		}(
			A2(_pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicatorLength, mode, _p42.version) + dataLength);
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$getVersion = F3(
	function (ecLevel, mode, dataLength) {
		return A2(
			_elm_lang$core$Result$fromMaybe,
			_pablohirafuji$elm_qrcode$QRCode_Error$InputLengthOverflow,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$sortBy,
					function (_) {
						return _.capacity;
					},
					A2(
						_elm_lang$core$List$filter,
						A2(_pablohirafuji$elm_qrcode$QRCode_Encode$filterCapacity, mode, dataLength),
						_pablohirafuji$elm_qrcode$QRCode_GroupInfo$getGroupData(ecLevel)))));
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$versionToModel = F5(
	function (inputStr, ecLevel, mode, partialBitsCount, groupInfo) {
		return {
			inputStr: inputStr,
			ecLevel: ecLevel,
			mode: mode,
			groupInfo: groupInfo,
			bitsCount: partialBitsCount + A2(_pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicatorLength, mode, groupInfo.version)
		};
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$selectVersion = F4(
	function (inputStr, ecLevel, mode, encodedStr) {
		var partialBitsCount = A2(
			F2(
				function (x, y) {
					return x + y;
				}),
			4,
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (a, b) {
						return _elm_lang$core$Tuple$second(a) + b;
					}),
				0,
				encodedStr));
		return A2(
			_elm_lang$core$Result$map,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				})(encodedStr),
			A2(
				_elm_lang$core$Result$map,
				A4(_pablohirafuji$elm_qrcode$QRCode_Encode$versionToModel, inputStr, ecLevel, mode, partialBitsCount),
				A3(_pablohirafuji$elm_qrcode$QRCode_Encode$getVersion, ecLevel, mode, partialBitsCount)));
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$modeIndicator = function (mode) {
	var _p43 = mode;
	switch (_p43.ctor) {
		case 'Numeric':
			return 1;
		case 'Alphanumeric':
			return 2;
		case 'Byte':
			return 4;
		default:
			return 4;
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$encoder = function (mode) {
	var _p44 = mode;
	switch (_p44.ctor) {
		case 'Numeric':
			return _pablohirafuji$elm_qrcode$QRCode_Encode_Numeric$encode;
		case 'Alphanumeric':
			return _pablohirafuji$elm_qrcode$QRCode_Encode_Alphanumeric$encode;
		case 'Byte':
			return _pablohirafuji$elm_qrcode$QRCode_Encode_Byte$encode;
		default:
			return _pablohirafuji$elm_qrcode$QRCode_Encode_UTF8$encode;
	}
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$Model = F5(
	function (a, b, c, d, e) {
		return {inputStr: a, ecLevel: b, mode: c, groupInfo: d, bitsCount: e};
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$UTF8 = {ctor: 'UTF8'};
var _pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicator = F2(
	function (_p45, bits) {
		var _p46 = _p45;
		var _p47 = _p46.mode;
		var length = A2(_pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicatorLength, _p47, _p46.groupInfo.version);
		var charCount = _elm_lang$core$Native_Utils.eq(_p47, _pablohirafuji$elm_qrcode$QRCode_Encode$UTF8) ? _elm_lang$core$List$length(bits) : _elm_lang$core$String$length(_p46.inputStr);
		return {ctor: '_Tuple2', _0: charCount, _1: length};
	});
var _pablohirafuji$elm_qrcode$QRCode_Encode$addInfoAndFinalBits = function (_p48) {
	var _p49 = _p48;
	var _p51 = _p49._1;
	var _p50 = _p49._0;
	return A2(
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		_p51,
		A2(
			_pablohirafuji$elm_qrcode$QRCode_Encode$addFiller,
			_p51.groupInfo.capacity,
			_pablohirafuji$elm_qrcode$QRCode_Encode$bitsToBytes(
				A3(
					_pablohirafuji$elm_qrcode$QRCode_Encode$addTerminator,
					_p51.groupInfo.capacity,
					_p51.bitsCount,
					A2(
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							}),
						{
							ctor: '_Tuple2',
							_0: _pablohirafuji$elm_qrcode$QRCode_Encode$modeIndicator(_p51.mode),
							_1: 4
						},
						A2(
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								}),
							A2(_pablohirafuji$elm_qrcode$QRCode_Encode$charCountIndicator, _p51, _p50),
							_p50))))));
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$Byte = {ctor: 'Byte'};
var _pablohirafuji$elm_qrcode$QRCode_Encode$Alphanumeric = {ctor: 'Alphanumeric'};
var _pablohirafuji$elm_qrcode$QRCode_Encode$Numeric = {ctor: 'Numeric'};
var _pablohirafuji$elm_qrcode$QRCode_Encode$selectMode = function (input) {
	return _pablohirafuji$elm_qrcode$QRCode_Encode_Numeric$isValid(input) ? _pablohirafuji$elm_qrcode$QRCode_Encode$Numeric : (_pablohirafuji$elm_qrcode$QRCode_Encode_Alphanumeric$isValid(input) ? _pablohirafuji$elm_qrcode$QRCode_Encode$Alphanumeric : (_pablohirafuji$elm_qrcode$QRCode_Encode_Byte$isValid(input) ? _pablohirafuji$elm_qrcode$QRCode_Encode$Byte : _pablohirafuji$elm_qrcode$QRCode_Encode$UTF8));
};
var _pablohirafuji$elm_qrcode$QRCode_Encode$encode = F2(
	function (inputStr, ecLevel) {
		var mode = _pablohirafuji$elm_qrcode$QRCode_Encode$selectMode(inputStr);
		return A2(
			_elm_lang$core$Result$map,
			_pablohirafuji$elm_qrcode$QRCode_Encode$concatTranspose,
			A2(
				_elm_lang$core$Result$andThen,
				_pablohirafuji$elm_qrcode$QRCode_Encode$getErrorCorrection,
				A2(
					_elm_lang$core$Result$andThen,
					_pablohirafuji$elm_qrcode$QRCode_Encode$toBlocks,
					A2(
						_elm_lang$core$Result$map,
						_pablohirafuji$elm_qrcode$QRCode_Encode$addInfoAndFinalBits,
						A2(
							_elm_lang$core$Result$andThen,
							A3(_pablohirafuji$elm_qrcode$QRCode_Encode$selectVersion, inputStr, ecLevel, mode),
							A2(_pablohirafuji$elm_qrcode$QRCode_Encode$encoder, mode, inputStr))))));
	});
