var _user$project$Main$activeNavBarItemStyle = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#0092ee'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5px'},
		_1: {ctor: '[]'}
	}
};
var _user$project$Main$qrCodeView = function (message) {
	return A2(
		_elm_lang$core$Result$withDefault,
		_elm_lang$html$Html$text('Error while encoding to QRCode.'),
		A2(
			_elm_lang$core$Result$map,
			_pablohirafuji$elm_qrcode$QRCode$toSvg,
			_pablohirafuji$elm_qrcode$QRCode$encode(message)));
};
var _user$project$Main$remote = function (url) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('remote'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$qrCodeView(url),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('icons/icons8-remote-control-48.png'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$initialModel = {
	position: 0,
	activeNavBarItem: 0,
	currentPage: _user$project$Data$page1,
	navigator: _user$project$Navigation$toolbarNavigator,
	navigationPath: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'navBar', _1: 0},
		_1: {ctor: '[]'}
	},
	pages: {
		ctor: '::',
		_0: _user$project$Data$page1,
		_1: {
			ctor: '::',
			_0: _user$project$Data$page2,
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Main$model = {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$GridCell = F3(
	function (a, b, c) {
		return {content: a, spanH: b, spanV: c};
	});
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {position: a, activeNavBarItem: b, currentPage: c, navigator: d, navigationPath: e, pages: f};
	});
var _user$project$Main$Page = F4(
	function (a, b, c, d) {
		return {navBarIcon: a, gridSize: b, pageName: c, moduleList: d};
	});
var _user$project$Main$Receive = function (a) {
	return {ctor: 'Receive', _0: a};
};
var _user$project$Main$KeyMsg = function (a) {
	return {ctor: 'KeyMsg', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyMsg),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$websocket$WebSocket$listen, 'ws://localhost:3000', _user$project$Main$Receive),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$FocusResult = function (a) {
	return {ctor: 'FocusResult', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = A2(_elm_lang$core$Debug$log, 'Debug log: ', msg);
		switch (_p0.ctor) {
			case 'KeyMsg':
				var newModel = A2(
					_user$project$Navigation$navigator,
					model,
					A2(_user$project$Navigation$convertInputToCommand, _p0._0, model.navigator));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						newModel,
						{position: newModel.position}),
					_1: A2(
						_elm_lang$core$Task$attempt,
						_user$project$Main$FocusResult,
						_elm_lang$dom$Dom$focus(
							_elm_lang$core$Basics$toString(newModel.position)))
				};
			case 'SetFocus':
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{position: _p1}),
					_1: A2(
						_elm_lang$core$Task$attempt,
						_user$project$Main$FocusResult,
						_elm_lang$dom$Dom$focus(
							_elm_lang$core$Basics$toString(_p1)))
				};
			case 'FocusResult':
				var _p2 = _p0._0;
				if (_p2.ctor === 'Err') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p3 = A2(_elm_lang$core$Json_Decode$decodeString, _elm_lang$core$Json_Decode$int, _p0._0);
				if (_p3.ctor === 'Ok') {
					var newModel = A2(
						_user$project$Navigation$navigator,
						model,
						A2(_user$project$Navigation$convertInputToCommand, _p3._0, model.navigator));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							newModel,
							{position: newModel.position}),
						_1: A2(
							_elm_lang$core$Task$attempt,
							_user$project$Main$FocusResult,
							_elm_lang$dom$Dom$focus(
								_elm_lang$core$Basics$toString(newModel.position)))
					};
				} else {
					var err = A2(_elm_lang$core$Debug$log, 'msg error', _p3._0);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
		}
	});
var _user$project$Main$SetFocus = function (a) {
	return {ctor: 'SetFocus', _0: a};
};
var _user$project$Main$cell = F2(
	function (index, cellContent) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('grid-cell'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$tabindex(index),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(
							_elm_lang$core$Basics$toString(index)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$SetFocus(index)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: cellContent.content,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$mainGrid = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'grid-template-columns',
							_1: _elm_lang$core$String$concat(
								{
									ctor: '::',
									_0: 'repeat(',
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(model.currentPage.gridSize),
										_1: {
											ctor: '::',
											_0: ',1fr)',
											_1: {ctor: '[]'}
										}
									}
								})
						},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		A2(_elm_lang$core$List$indexedMap, _user$project$Main$cell, model.currentPage.moduleList));
};
var _user$project$Main$navBarIcon = F3(
	function (index, page, activeNavBarItem) {
		var iconStyle = _elm_lang$core$Native_Utils.eq(activeNavBarItem, index) ? _user$project$Main$activeNavBarItemStyle : {ctor: '[]'};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('navbar-menu-icon'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(
						A2(
							_elm_lang$core$String$append,
							'navbar',
							_elm_lang$core$Basics$toString(index))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$tabindex(index),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$SetFocus(index)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '2em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '2px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'align-self', _1: 'center'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '6px'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('navbar-icon'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(page.navBarIcon),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(iconStyle),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$navBar = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('navbar'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, page) {
					return A3(_user$project$Main$navBarIcon, i, page, model.activeNavBarItem);
				}),
			model.pages));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('app'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$navBar(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$mainGrid(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$remote('http://192.168.0.100:8000'),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$model, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})();
